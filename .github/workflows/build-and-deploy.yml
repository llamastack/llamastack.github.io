name: Build and Deploy Docusaurus Documentation

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (latest, v0.2.23, etc.)'
        required: false
        default: 'latest'
        type: string
      action:
        description: 'Action to perform'
        required: false
        default: 'build-and-deploy'
        type: choice
        options:
          - build-only
          - deploy-only
          - build-and-deploy

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    if: ${{ github.event.inputs.action != 'deploy-only' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Clone llama-stack repository with full history
      run: |
        echo "üì• Cloning llama-stack repository with full history..."
        git clone https://github.com/llamastack/llama-stack.git ${{ runner.temp }}/llama-stack
        cd ${{ runner.temp }}/llama-stack
        git fetch --all --tags

        # Determine version to build
        VERSION="${{ github.event.inputs.version }}"
        if [ -z "$VERSION" ] || [ "$VERSION" = "latest" ]; then
          # Use main branch for latest
          git checkout main
          echo "Building from main branch (latest)"
          echo "BUILDING_LATEST=true" >> $GITHUB_ENV
          echo "VERSION_TAG=latest" >> $GITHUB_ENV
        else
          # Checkout specific version tag
          git checkout "$VERSION"
          echo "Building from tag: $VERSION"
          echo "BUILDING_LATEST=false" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION" >> $GITHUB_ENV
        fi

        echo "‚úÖ Repository prepared"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '${{ runner.temp }}/llama-stack/docs/package-lock.json'

    - name: Install Docusaurus dependencies
      run: |
        echo "üì¶ Installing Docusaurus dependencies..."
        cd ${{ runner.temp }}/llama-stack/docs
        npm ci
        echo "‚úÖ Dependencies installed"

    - name: Apply Docusaurus configuration patches
      run: |
        echo "‚öôÔ∏è Applying Docusaurus configuration patches..."
        cd ${{ runner.temp }}/llama-stack/docs

        # Create versioning files for current state
        cat > versionsArchived.json << 'EOF'
        {
          "v0.2.22": "https://llamastack.github.io/legacy/v0.2.22/",
          "v0.2.21": "https://llamastack.github.io/legacy/v0.2.21/",
          "v0.2.20": "https://llamastack.github.io/legacy/v0.2.20/",
          "v0.2.19": "https://llamastack.github.io/legacy/v0.2.19/",
          "v0.2.18": "https://llamastack.github.io/legacy/v0.2.18/",
          "v0.2.17": "https://llamastack.github.io/legacy/v0.2.17/",
          "v0.2.16": "https://llamastack.github.io/legacy/v0.2.16/",
          "v0.2.15": "https://llamastack.github.io/legacy/v0.2.15/",
          "v0.2.14": "https://llamastack.github.io/legacy/v0.2.14/",
          "v0.2.13": "https://llamastack.github.io/legacy/v0.2.13/",
          "v0.2.12": "https://llamastack.github.io/legacy/v0.2.12/",
          "v0.2.11": "https://llamastack.github.io/legacy/v0.2.11/"
        }
        EOF

        # Load current Docusaurus versions
        if [ -f "${{ github.workspace }}/docs/versions.json" ]; then
          cp "${{ github.workspace }}/docs/versions.json" ./
        else
          echo "[]" > versions.json
        fi

        echo "üîß Patching Docusaurus configuration..."

        # Create comprehensive config patch script
        cat > patch-config.js << 'PATCH_EOF'
        const fs = require('fs');
        const path = require('path');

        const configPath = 'docusaurus.config.ts';
        let config = fs.readFileSync(configPath, 'utf8');

        // Load versions to determine current version label
        const buildingLatest = process.env.BUILDING_LATEST === 'true';
        const versionTag = process.env.VERSION_TAG;
        const currentVersionLabel = buildingLatest ? 'Latest' : versionTag;

        console.log(`Patching config for version: ${versionTag} (latest: ${buildingLatest})`);

        // Add versioning imports and logic
        const versioningImports = `
        // Import archived versions configuration
        const fs = require('fs');
        const path = require('path');

        // Load archived versions (legacy Sphinx versions)
        const versionsArchived = (() => {
          try {
            return JSON.parse(fs.readFileSync(path.join(__dirname, 'versionsArchived.json'), 'utf8'));
          } catch (e) {
            console.warn('Could not load versionsArchived.json:', e);
            return {};
          }
        })();

        // Load current Docusaurus versions
        const currentVersions = (() => {
          try {
            return JSON.parse(fs.readFileSync(path.join(__dirname, 'versions.json'), 'utf8'));
          } catch (e) {
            console.warn('Could not load versions.json:', e);
            return [];
          }
        })();

        // Create dropdown items for archived versions (legacy Sphinx)
        const archivedVersionsDropdownItems = Object.entries(versionsArchived).map(
          ([versionName, versionUrl]) => ({
            label: versionName,
            href: versionUrl,
          })
        );

        // Create dropdown items for Docusaurus versions
        const docusaurusVersionsDropdownItems = currentVersions.map(version => ({
          label: version,
          to: \`/docs/\${version}/\`,
        }));
        `;

        // Insert versioning imports after existing imports
        config = config.replace(
          /import type \* as OpenApiPlugin from "docusaurus-plugin-openapi-docs";/,
          `import type * as OpenApiPlugin from "docusaurus-plugin-openapi-docs";

        ${versioningImports}`
        );

        // Update version configuration based on build type
        const versionConfig = buildingLatest ?
          `// Versioning configuration
          lastVersion: 'current',
          versions: {
            current: {
              label: '${currentVersionLabel}',
              path: '',
            },
          },
          onlyIncludeVersions: ['current'],` :
          `// Versioning configuration
          lastVersion: 'current',
          versions: {
            current: {
              label: '${currentVersionLabel}',
              path: '',
            },
          },
          includeCurrentVersion: true,`;

        // Add/update versioning configuration to docs config
        if (config.includes('docItemComponent: "@theme/ApiItem"')) {
          config = config.replace(
            /docItemComponent: "@theme\/ApiItem", \/\/ Derived from docusaurus-theme-openapi/,
            `docItemComponent: "@theme/ApiItem", // Derived from docusaurus-theme-openapi

          ${versionConfig}`
          );
        }

        // Create version dropdown combining Docusaurus and archived versions
        const versionDropdown = `        {
          href: 'https://github.com/llamastack/llama-stack',
          label: 'GitHub',
          position: 'right',
        },
        // Version dropdown with current, Docusaurus, and archived versions
        {
          type: 'docsVersionDropdown',
          position: 'right',
          dropdownItemsAfter: [
            // Docusaurus versions (if any)
            ...docusaurusVersionsDropdownItems,
            // Separator before archived versions
            ...(archivedVersionsDropdownItems.length > 0 ? [
              {
                type: 'html',
                value: '<hr class="dropdown-separator">',
              },
              {
                type: 'html',
                className: 'dropdown-archived-versions',
                value: '<b>Archived versions</b>',
              },
              ...archivedVersionsDropdownItems,
            ] : []),
            // All versions link
            {
              type: 'html',
              value: '<hr class="dropdown-separator">',
            },
            {
              to: '/versions',
              label: 'All versions',
            },
          ],
        },`;

        // Replace GitHub item with version dropdown + GitHub
        config = config.replace(
          /        {\s*href: 'https:\/\/github\.com\/llamastack\/llama-stack',\s*label: 'GitHub',\s*position: 'right',\s*},/,
          versionDropdown
        );

        fs.writeFileSync(configPath, config);
        console.log('‚úÖ Docusaurus configuration patched successfully');
        PATCH_EOF

        # Apply the patch
        BUILDING_LATEST=${{ env.BUILDING_LATEST }} VERSION_TAG=${{ env.VERSION_TAG }} node patch-config.js

        echo "‚úÖ Configuration patches applied"

    - name: Create Docusaurus version (if not latest)
      if: env.BUILDING_LATEST != 'true'
      run: |
        echo "üìö Creating Docusaurus version for ${{ env.VERSION_TAG }}..."
        cd ${{ runner.temp }}/llama-stack/docs

        # Generate API docs first
        npm run gen-api-docs all

        # Create the version
        npm run docusaurus docs:version ${{ env.VERSION_TAG }}

        echo "‚úÖ Docusaurus version ${{ env.VERSION_TAG }} created"

    - name: Generate API documentation
      run: |
        echo "üìö Generating API documentation..."
        cd ${{ runner.temp }}/llama-stack/docs
        npm run gen-api-docs all
        echo "‚úÖ API docs generated"

    - name: Build Docusaurus site
      run: |
        echo "üèóÔ∏è Building Docusaurus site..."
        cd ${{ runner.temp }}/llama-stack/docs
        npm run build
        echo "‚úÖ Docusaurus build completed"

    - name: Deploy to docs directory
      run: |
        echo "üóÇÔ∏è Deploying Docusaurus build..."

        # Smart deployment: clear everything except legacy, .git, and .nojekyll
        find ${{ github.workspace }}/docs -mindepth 1 -maxdepth 1 ! -name 'legacy' ! -name '.git' ! -name '.nojekyll' -exec rm -rf {} +

        # Copy Docusaurus build output
        cp -r ${{ runner.temp }}/llama-stack/docs/build/* ${{ github.workspace }}/docs/

        # Ensure .nojekyll exists
        touch "${{ github.workspace }}/docs/.nojekyll"

        echo "‚úÖ Docusaurus content deployed"

    - name: Update version management
      run: |
        echo "‚öôÔ∏è Updating version management..."

        # Copy/update versioning files to deployment
        cp "${{ runner.temp }}/llama-stack/docs/versionsArchived.json" "${{ github.workspace }}/docs/"

        # Update versions.json if we built a new version
        if [ "${{ env.BUILDING_LATEST }}" != "true" ]; then
          echo "Adding version ${{ env.VERSION_TAG }} to versions.json"

          # Load current versions.json
          VERSIONS_FILE="${{ github.workspace }}/docs/versions.json"
          if [ -f "$VERSIONS_FILE" ]; then
            CURRENT_VERSIONS=$(cat "$VERSIONS_FILE")
          else
            CURRENT_VERSIONS="[]"
          fi

          # Add new version if not already present
          NEW_VERSION="${{ env.VERSION_TAG }}"
          UPDATED_VERSIONS=$(echo "$CURRENT_VERSIONS" | jq --arg version "$NEW_VERSION" '. as $arr | if ($arr | index($version)) then $arr else [$version] + $arr end')

          echo "$UPDATED_VERSIONS" > "$VERSIONS_FILE"
          echo "‚úÖ Updated versions.json with $NEW_VERSION"
        fi

        cp "${{ runner.temp }}/llama-stack/docs/versions.json" "${{ github.workspace }}/docs/" 2>/dev/null || echo "[]" > "${{ github.workspace }}/docs/versions.json"

        echo "‚úÖ Version management updated"

    - name: Verify deployment structure
      run: |
        echo "üîç Verifying deployment structure..."

        echo "Contents of docs directory:"
        ls -la ${{ github.workspace }}/docs/ | head -10

        echo -e "\nLegacy versions:"
        ls -la ${{ github.workspace }}/docs/legacy/ 2>/dev/null | head -5 || echo "‚ùå Legacy directory missing"

        echo -e "\nVersioning files:"
        [ -f "${{ github.workspace }}/docs/versionsArchived.json" ] && echo "‚úÖ versionsArchived.json exists" || echo "‚ùå versionsArchived.json missing"
        [ -f "${{ github.workspace }}/docs/versions.json" ] && echo "‚úÖ versions.json exists" || echo "‚ùå versions.json missing"

        echo -e "\nDocusaurus versions:"
        if [ -d "${{ github.workspace }}/docs/docs" ]; then
          ls -la "${{ github.workspace }}/docs/docs/" | head -5
        fi

        echo -e "\n‚úÖ Structure verification complete"

    - name: Commit and push changes
      run: |
        echo "üíæ Committing changes..."

        cd ${{ github.workspace }}
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # Add all changes
        git add .

        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          if [ "${{ env.BUILDING_LATEST }}" = "true" ]; then
            git commit -m "Update Docusaurus documentation (latest)

          - Updated latest Docusaurus build
          - Applied configuration patches for version dropdown
          - Maintained legacy versions in /legacy/ directory
          - Version dropdown shows 'Latest' with archived versions

          [skip ci]"
          else
            git commit -m "Add Docusaurus version ${{ env.VERSION_TAG }}

          - Created new Docusaurus version ${{ env.VERSION_TAG }}
          - Updated versions.json with new version
          - Applied configuration patches for version dropdown
          - Maintained legacy versions in /legacy/ directory

          [skip ci]"
          fi
          git push
          echo "‚úÖ Changes committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Setup GitHub Pages
      if: ${{ github.event.inputs.action == 'build-and-deploy' }}
      uses: actions/configure-pages@v5

    - name: Upload Pages artifact
      if: ${{ github.event.inputs.action == 'build-and-deploy' }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs'

  deploy-after-build:
    if: ${{ github.event.inputs.action == 'build-and-deploy' }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  deploy-only:
    if: ${{ github.event.inputs.action == 'deploy-only' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
